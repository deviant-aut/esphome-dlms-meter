esphome:
  name: smartmeter1
  includes:
    - ./esphome-dlms-meter

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  baud_rate: 0

# Enable Home Assistant API

api:
  #encryption:
  #  key: "49isPUFJHnj3UmYsZPhf46v8wRMP18X5+5Nx3ce+xRM="

ota:
  password: "588f41b61cd098397c471b59ec1752cd"

#api:

#ota:
#  password: "ef28692c1799268898174e15ef7a7d98"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  domain: ".lan"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "smartmeter Fallback Hotspot"
    password: "mOzZzO8u4Vm5"

captive_portal:

uart:
  #tx_pin: GPIO1  #esp32cam
  #rx_pin: GPIO3
  tx_pin: GPIO3 #invert for esp32mini
  rx_pin: GPIO1
  baud_rate: 2400
  rx_buffer_size: 1024 # Needed to receive the large packets send by the smart meter
  id: mbus
  debug:
      
sensor:
  - platform: template
    id: smartmeter1_voltage_l1
    name: smartmeter1_voltage_l1
    unit_of_measurement: V
    accuracy_decimals: 1
    device_class: "voltage"
    state_class: "measurement"
  - platform: template
    id: smartmeter1_voltage_l2
    name: smartmeter1_voltage_l2
    unit_of_measurement: V
    accuracy_decimals: 1
    device_class: "voltage"
    state_class: "measurement"
  - platform: template
    id: smartmeter1_voltage_l3
    name: smartmeter1_voltage_l3
    unit_of_measurement: V
    accuracy_decimals: 1
    device_class: "voltage"
    state_class: "measurement"

  - platform: template
    id: smartmeter1_current_l1
    name: smartmeter1_current_l1
    unit_of_measurement: A
    accuracy_decimals: 2
    device_class: "current"
    state_class: "measurement"
  - platform: template
    id: smartmeter1_current_l2
    name: smartmeter1_current_l2
    unit_of_measurement: A
    accuracy_decimals: 2
    device_class: "current"
    state_class: "measurement"
  - platform: template
    id: smartmeter1_current_l3
    name: smartmeter1_current_l3
    unit_of_measurement: A
    accuracy_decimals: 2
    device_class: "current"
    state_class: "measurement"

  - platform: template
    id: smartmeter1_active_power_plus
    name: smartmeter1_active_power_plus
    unit_of_measurement: W
    accuracy_decimals: 0
    device_class: "power"
    state_class: "measurement"
  - platform: template
    id: smartmeter1_active_power_minus
    name: smartmeter1_active_power_minus
    unit_of_measurement: W
    accuracy_decimals: 0
    device_class: "power"
    state_class: "measurement"
  - platform: template
    id: smartmeter1_power_factor
    name: smartmeter1_power_factor
    unit_of_measurement: " "
    accuracy_decimals: 3
    device_class: "power_factor"
    state_class: "measurement"

  - platform: template
    id: smartmeter1_active_energy_plus
    name: smartmeter1_active_energy_plus
    unit_of_measurement: Wh
    accuracy_decimals: 0
    device_class: "energy"
    state_class: "total_increasing"
  - platform: template
    id: smartmeter1_active_energy_minus
    name: smartmeter1_active_energy_minus
    unit_of_measurement: Wh
    accuracy_decimals: 0
    device_class: "energy"
    state_class: "total_increasing"

  - platform: template
    id: smartmeter1_reactive_energy_plus
    name: smartmeter1_reactive_energy_plus
    unit_of_measurement: Wh
    accuracy_decimals: 0
    device_class: "energy"
    state_class: "total_increasing"
  - platform: template
    id: smartmeter1_reactive_energy_minus
    name: smartmeter1_reactive_energy_minus
    unit_of_measurement: Wh
    accuracy_decimals: 0
    device_class: "energy"
    state_class: "total_increasing"

text_sensor:
  - platform: template
    id: smartmeter1_timestamp
    name: smartmeter1_timestamp
  - platform: template
    id: smartmeter1_meternumber
    name: smartmeter1_meternumber

mqtt:
  broker: hassio.lan
  id: mqtt_broker
  username: !mqttuser
  password: !mqttpw

custom_component:
  - lambda: |-

      auto dlms_meter = new esphome::espdm::DlmsMeter(id(mbus));

      byte key[] = {0xB8, 0x5B, 0xC7, 0xCA, 0xEE, 0x06, 0xBF, 0xF3, 0xA9, 0x3D, 0x55, 0xBE, 0x7D, 0xFF, 0x99, 0xD7};
      dlms_meter->set_key(key, 16); //# Pass your decryption key and key length here

      dlms_meter->set_voltage_sensors(id(smartmeter1_voltage_l1), id(smartmeter1_voltage_l2), id(smartmeter1_voltage_l3)); //# Set sensors to use for voltage (optional)

      dlms_meter->set_current_sensors(id(smartmeter1_current_l1), id(smartmeter1_current_l2), id(smartmeter1_current_l3)); //# Set sensors to use for current (optional)

      dlms_meter->set_active_power_sensors(id(smartmeter1_active_power_plus), id(smartmeter1_active_power_minus), id(smartmeter1_power_factor)); // Set sensors to use for active power (optional) # Set sensors to use for active power (optional)

      dlms_meter->set_active_energy_sensors(id(smartmeter1_active_energy_plus), id(smartmeter1_active_energy_minus)); //# Set sensors to use for active energy (optional)
      dlms_meter->set_reactive_energy_sensors(id(smartmeter1_reactive_energy_plus), id(smartmeter1_reactive_energy_minus)); //# Set sensors to use for reactive energy (optional)

      dlms_meter->set_timestamp_sensor(id(smartmeter1_timestamp)); //# Set sensor to use for timestamp (optional)

      dlms_meter->set_meternumber_sensor(id(smartmeter1_meternumber)); // Set sensor to use for meterNumber (optional)

      dlms_meter->enable_mqtt(id(mqtt_broker), "smartmeter1/data"); //# Enable grouped together MQTT report, useful to get exact time with each data for storing results in InfluxDB

      return {dlms_meter};


# Enable time component to reset energy at midnight
time:
  - platform: sntp
    id: my_time
    
# Example configuration entry
web_server:
  port: 80
  auth:
    username: admin
    password: !secret webadminpw
